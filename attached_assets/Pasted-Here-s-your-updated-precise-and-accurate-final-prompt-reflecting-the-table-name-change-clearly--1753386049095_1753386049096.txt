Here‚Äôs your updated, precise, and accurate final prompt reflecting the table name change clearly:

‚∏ª

‚úÖ Final Prompt for Replit Developer (Table Names Updated)

Goal:
	‚Ä¢	Consolidate work cycle data accurately from the provided CSV (cycles-appended.csv), resolving Fulfil‚Äôs duplication and duration issues:
	‚Ä¢	Duration: sum all cycle rows per WO/MO/Operation.
	‚Ä¢	Quantity: Take only from the first fully populated row (completed row) per WO/MO/Operation.
	‚Ä¢	Calculate and store UPH (units per hour) separately for each unique:

Operator + Operation + Routing + Work_Center

combination (Columns O & Q).

üìå Step-by-Step Instructions:

‚∏ª

Step 1: Clear Existing Consolidated and UPH Data
	‚Ä¢	Clear existing data from tables:

work_cycles_consolidated
operator_uph



‚∏ª

Step 2: Load CSV and Prepare Data
	‚Ä¢	Load provided CSV file:

cycles-appended.csv


	‚Ä¢	Convert work/cycles/duration from HH:MM:SS to numeric (duration_sec).

‚∏ª

Step 3: Consolidate Work Cycles (store in work_cycles_consolidated)
	‚Ä¢	Group rows strictly by:
	‚Ä¢	work/production/id (MO number)
	‚Ä¢	production_work_number+Operation_rec_name+production_number (key from CSV)
	‚Ä¢	Aggregate exactly:
	‚Ä¢	Duration (duration_sec):
	‚Ä¢	SUM all rows per group.
	‚Ä¢	Quantity (quantity_done):
	‚Ä¢	Use only the quantity from the first row where MO details (work/production/id) and quantity are populated.
	‚Ä¢	Timestamp & Metadata:
	‚Ä¢	Take from the first populated (completed) row.
	‚Ä¢	Store consolidated data into the table:

work_cycles_consolidated



‚∏ª

Step 4: Calculate and Store UPH (operator_uph)
	‚Ä¢	Group separately by these columns for UPH calculations:
	‚Ä¢	Column O: work/cycles/rec_name (Operator+Operation+Work_Center)
	‚Ä¢	Column Q: work/cycles/work/production/routing/name (Routing)
	‚Ä¢	For each unique combination, calculate UPH:

UPH = Total Quantity / Total Duration (hours)


	‚Ä¢	Store the following clearly in the table:

operator_uph

	‚Ä¢	operator_operation_workcenter (Column O)
	‚Ä¢	routing_name (Column Q)
	‚Ä¢	total_quantity (sum quantities for UPH calculation)
	‚Ä¢	total_duration_hours (sum durations in hours)
	‚Ä¢	uph (units per hour)

‚∏ª

‚öôÔ∏è Exact Python/Pandas Logic (Reference for Developer):

import pandas as pd

# Load CSV
df = pd.read_csv("cycles-appended.csv")

# Convert duration to seconds
df['duration_sec'] = pd.to_timedelta(df['work/cycles/duration']).dt.total_seconds()

# Flag completed rows (fully populated)
df['is_completed_row'] = df['work/production/id'].notnull() & df['work/cycles/quantity_done'].notnull()

# Consolidate by MO/WO/Operation
consolidated_df = df.groupby(['work/production/id', 'production_work_number+Operation_rec_name+production_number'], as_index=False).agg({
    'duration_sec': 'sum',
    'work/cycles/quantity_done': lambda x: x[df.loc[x.index, 'is_completed_row']].iloc[0],
    'work/cycles/operator/write_date': 'first',
    'work/cycles/operator/rec_name': 'first',
    'work/cycles/work_center/category/name': 'first',
    'work/cycles/rec_name': 'first',
    'work/cycles/work/production/routing/name': 'first'
})

# Save to 'work_cycles_consolidated' table

# Calculate UPH separately
uph_df = df.groupby(['work/cycles/rec_name', 'work/cycles/work/production/routing/name'], as_index=False).agg({
    'work/cycles/quantity_done': 'sum',
    'duration_sec': 'sum'
})

uph_df['total_duration_hours'] = uph_df['duration_sec'] / 3600
uph_df['uph'] = uph_df['work/cycles/quantity_done'] / uph_df['total_duration_hours']

uph_df.rename(columns={
    'work/cycles/rec_name': 'operator_operation_workcenter',
    'work/cycles/work/production/routing/name': 'routing_name',
    'work/cycles/quantity_done': 'total_quantity'
}, inplace=True)

final_uph = uph_df[['operator_operation_workcenter', 'routing_name', 'total_quantity', 'total_duration_hours', 'uph']]

# Save to 'operator_uph' table


‚∏ª

This explicitly ensures your Replit developer accurately and efficiently performs the consolidation and stores UPH data correctly.